{"ts":1374765850369,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Copyright (c) 2013 Crystalline Technologies\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'),\n//  to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n//  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n//  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//\n//  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \n//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar json2html = {\n    \n\t/* ---------------------------------------- Public Methods ------------------------------------------------ */\n\t'transform': function(json,transform,_options) {\n\t\t\n\t\t//create the default output\n\t\tvar out = {'events':[],'html':''};\n\t\t\n\t\t//default options (by default we don't allow events)\n\t\tvar options = {\n\t\t\t'events':false\n\t\t};\n\t\t\n\t\t//extend the options\n\t\toptions = json2html._extend(options,_options);\n\n\t\t//Make sure we have a transform & json object\n\t\tif( transform !== undefined || json !== undefined ) {\n\n\t\t\t//Normalize strings to JSON objects if necessary\n\t\t\tvar obj = typeof json === 'string' ? JSON.parse(json) : json;\n\t\t\t\n\t\t\t//Transform the object (using the options)\n\t\t\tout = json2html._transform(obj, transform, options);\n\t\t}\n\t\t\n\t\t//determine if we need the events\n\t\t// otherwise return just the html string\n\t\tif(options.events) return(out);\n\t\t\telse return( out.html );\n\t},\n\t\n\t/* ---------------------------------------- Private Methods ------------------------------------------------ */\n\t\n\t//Extend options\n\t'_extend':function(obj1,obj2){\n\t\tvar obj3 = {};\n\t\tfor (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n\t\tfor (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n\t\treturn obj3;\n\t},\n\t\n\t//Append results\n\t'_append':function(obj1,obj2) {\n\t\tvar out = {'html':'','event':[]};\n\t\tif(typeof obj1 !== 'undefined' && typeof obj2 !== 'undefined') {\n\t\t\tout.html = obj1.html + obj2.html;\n\n\t\t\tout.events = obj1.events.concat(obj2.events);\n\t\t}\n\n\t\treturn(out);\n\t},\n\t\n\t//Transform object\n\t'_transform':function(json, transform, options) {\n\t\t\n\t\tvar elements = {'events':[],'html':''};\n\t\t\n\t\t//Determine the type of this object\n\t\tif(Array.isArray(json)) {\n\t\t\t\n\t\t\t//Itterrate through the array and add it to the elements array\n\t\t\tvar len=json.length;\n\t\t\tfor(var j=0;j<len;++j) {\t\n\t\t\t\t//Apply the transform to this object and append it to the results\n\t\t\t\telements = json2html._append(elements,json2html._apply(json[j], transform, j, options));\n\t\t\t}\n\n\t\t} else if(typeof json === 'object') {\n\n\t\t\t//Apply the transform to this object and append it to the results\n\t\t\telements = json2html._append(elements,json2html._apply(json, transform, undefined, options));\n\t\t}\n\n\t\t//Return the resulting elements\n\t\treturn(elements);\t\t\n\t},\n\n\t//Apply the transform at the second level\n\t'_apply':function(obj, transform, index, options) {\n\n\t\tvar element = {'events':[],'html':''};\n\t\t\n\t\t//Itterate through the transform and create html as needed\n\t\tif(Array.isArray(transform)) {\n\t\t\t\n\t\t\tvar t_len = transform.length;\n\t\t\tfor(var t=0; t < t_len; ++t) {\n\t\t\t\t//transform the object and append it to the output\n\t\t\t\telement = json2html._append(element,json2html._apply(obj, transform[t], index, options));\n\t\t\t}\n\n\t\t} else if(typeof transform === 'object') {\n\n\t\t\t//Get the tag element of this transform\n\t\t\tif( transform.tag !== undefined ) {\n\n\t\t\t\t//Create a new element\n\t\t\t\telement.html += '<' + transform.tag;\n\t\t\t\t\n\t\t\t\t//Create a new object for the children\n\t\t\t\tvar children = {'events':[],'html':''};\n\t\t\t\t\n\t\t\t\t//innerHTML\n\t\t\t\tvar html;\n\n\t\t\t\t//Look into the properties of this transform\n\t\t\t\tfor (var key in transform) {\n\n\t\t\t\t\tswitch(key) {\n\t\t\t\t\t\tcase 'tag':\n\t\t\t\t\t\t\t//Do nothing as we have already created the element from the tag\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'children':\n\t\t\t\t\t\t\t//Add the children\n\t\t\t\t\t\t\tif(Array.isArray(transform.children)) {\n\n\t\t\t\t\t\t\t\t//Apply the transform to the children\n\t\t\t\t\t\t\t\tchildren = json2html._append(children,json2html._apply(obj, transform.children, index, options));\n\t\t\t\t\t\t\t} else if(typeof transform.children === 'function') {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Get the result from the function\n\t\t\t\t\t\t\t\tvar temp = transform.children.call(obj, obj, index);\n\n\t\t\t\t\t\t\t\t//Make sure we have an object result with the props\n\t\t\t\t\t\t\t\t// html (string), events (array)\n\t\t\t\t\t\t\t\t// OR a string (then just append it to the children\n\t\t\t\t\t\t\t\tif(typeof temp === 'object') {\n\t\t\t\t\t\t\t\t\t//make sure this object is a valid json2html response object\n\t\t\t\t\t\t\t\t\tif(temp.html !== undefined && temp.events !== undefined) children = json2html._append(children,temp);\n\t\t\t\t\t\t\t\t} else if(typeof temp === 'string') {\n\n\t\t\t\t\t\t\t\t\t//append the result directly to the html of the children\n\t\t\t\t\t\t\t\t\tchildren.html += temp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'html':\n\t\t\t\t\t\t\t//Create the html attribute for this element\n\t\t\t\t\t\t\thtml = json2html._getValue(obj,transform,'html',index);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t//Add the property as a attribute if it's not a key one\n\t\t\t\t\t\t\tvar isEvent = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Check if the first two characters are 'on' then this is an event\n\t\t\t\t\t\t\tif( key.length > 2 )\n\t\t\t\t\t\t\t\tif(key.substring(0,2).toLowerCase() == 'on') {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//Determine if we should add events\n\t\t\t\t\t\t\t\t\tif(options.events) {\n\n\t\t\t\t\t\t\t\t\t\t//if so then setup the event data\n\t\t\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\t\t\t'action':transform[key],\n\t\t\t\t\t\t\t\t\t\t\t'obj':obj,\n\t\t\t\t\t\t\t\t\t\t\t'data':options.eventData,\n\t\t\t\t\t\t\t\t\t\t\t'index':index\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//create a new id for this event\n\t\t\t\t\t\t\t\t\t\tvar id = json2html._guid();\n\n\t\t\t\t\t\t\t\t\t\t//append the new event to this elements events\n\t\t\t\t\t\t\t\t\t\telement.events[element.events.length] = {'id':id,'type':key.substring(2),'data':data};\n\n\t\t\t\t\t\t\t\t\t\t//Insert temporary event property (json2html-event-id) into the element\n\t\t\t\t\t\t\t\t\t\telement.html += \" json2html-event-id-\"+key.substring(2)+\"='\" + id + \"'\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//this is an event\n\t\t\t\t\t\t\t\t\tisEvent = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//If this wasn't an event AND we actually have a value then add it as a property\n\t\t\t\t\t\t\tif( !isEvent){\n\t\t\t\t\t\t\t\t//Get the value\n\t\t\t\t\t\t\t\tvar val = json2html._getValue(obj, transform, key, index);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Make sure we have a value\n                                if(val !== undefined) {\n                                    var out;\n                                    \n                                    //Determine the output type of this value (wrap with quotes)\n                                    if(typeof val === 'string') out = '\"' + val.replace(/\"/g, '&quot;') + '\"';\n                                    else out = val;\n                                    \n                                    //creat the name value pair\n\t\t\t\t\t\t\t\t    element.html += ' ' + key + '=' + out;\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//close the opening tag\n\t\t\t\telement.html += '>';\n\t\t\t\t\n\t\t\t\t//add the innerHTML (if we have any)\n\t\t\t\tif(html) element.html += html;\n\n\t\t\t\t//add the children (if we have any)\n\t\t\t\telement = json2html._append(element,children);\n\n\t\t\t\t//add the closing tag\n\t\t\t\telement.html += '</' + transform.tag + '>';\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Return the output object\n\t\treturn(element);\n\t},\n\n\t//Get a new GUID (used by events)\n\t'_guid':function() {\n\t\tvar S4 = function() {\n\t\t   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n\t\t};\n\t\treturn (S4()+S4()+\"-\"+S4()+S4()+\"-\"+S4()+S4());\n\t},\n\n\t//Get the html value of the object\n\t'_getValue':function(obj, transform, key,index) {\n\t\t\n\t\tvar out = '';\n\t\t\n\t\tvar val = transform[key];\n\t\tvar type = typeof val;\n\t\t\n\t\tif (type === 'function') {\n\t\t\treturn(val.call(obj,obj,index));\n\t\t} else if (type === 'string') {\n\t\t\tvar _tokenizer = new json2html._tokenizer([\n\t\t\t\t/\\$\\{([^\\}\\{]+)\\}/\n\t\t\t],function( src, real, re ){\n\t\t\t\treturn real ? src.replace(re,function(all,name){\n\t\t\t\t\t\n\t\t\t\t\t//Split the string into it's seperate components\n\t\t\t\t\tvar components = name.split('.');\n\n\t\t\t\t\t//Set the object we use to query for this name to be the original object\n\t\t\t\t\tvar useObj = obj;\n\n\t\t\t\t\t//Output value\n\t\t\t\t\tvar outVal = '';\n\t\t\t\t\t\n\t\t\t\t\t//Parse the object components\n\t\t\t\t\tvar c_len = components.length;\n\t\t\t\t\tfor (var i=0;i<c_len;++i) {\n\n\t\t\t\t\t\tif( components[i].length > 0 ) {\n\n\t\t\t\t\t\t\tvar newObj = useObj[components[i]];\n\t\t\t\t\t\t\tuseObj = newObj;\n\t\t\t\t\t\t\tif(useObj === null || useObj === undefined) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//As long as we have an object to use then set the out\n\t\t\t\t\tif(useObj !== null && useObj !== undefined) outVal = useObj;\n\n\t\t\t\t\treturn(outVal);\n\t\t\t\t}) : src;\n\t\t\t});\n\t\t\t\n\t\t\tout = _tokenizer.parse(val).join('');\n\t\t} else {\n\t\t\tout = val;\n\t\t}\n\n\t\treturn(out);\n\t},\n\t\n\t//Tokenizer\n\t'_tokenizer':function( tokenizers, doBuild ){\n\n\t\tif( !(this instanceof json2html._tokenizer ) )\n\t\t\treturn new json2html._tokenizer( tokenizers, doBuild );\n\t\t\t\n\t\tthis.tokenizers = tokenizers.splice ? tokenizers : [tokenizers];\n\t\tif( doBuild )\n\t\t\tthis.doBuild = doBuild;\n\n\t\tthis.parse = function( src ){\n\t\t\tthis.src = src;\n\t\t\tthis.ended = false;\n\t\t\tthis.tokens = [ ];\n\t\t\tdo {\n\t\t\t\tthis.next();\n\t\t\t} while( !this.ended );\n\t\t\treturn this.tokens;\n\t\t};\n\t\t\n\t\tthis.build = function( src, real ){\n\t\t\tif( src )\n\t\t\t\tthis.tokens.push(\n\t\t\t\t\t!this.doBuild ? src :\n\t\t\t\t\tthis.doBuild(src,real,this.tkn)\n\t\t\t\t);\t\n\t\t};\n\n\t\tthis.next = function(){\n\t\t\tvar self = this,\n\t\t\t\tplain;\n\t\t\t\t\n\t\t\tself.findMin();\n\t\t\tplain = self.src.slice(0, self.min);\n\t\t\t\n\t\t\tself.build( plain, false );\n\t\t\t\t\n\t\t\tself.src = self.src.slice(self.min).replace(self.tkn,function( all ){\n\t\t\t\tself.build(all, true);\n\t\t\t\treturn '';\n\t\t\t});\n\t\t\t\n\t\t\tif( !self.src )\n\t\t\t\tself.ended = true;\n\t\t};\n\n\t\tthis.findMin = function(){\n\t\t\tvar self = this, i=0, tkn, idx;\n\t\t\tself.min = -1;\n\t\t\tself.tkn = '';\n\t\t\t\n\t\t\twhile(( tkn = self.tokenizers[i++]) !== undefined ){\n\t\t\t\tidx = self.src[tkn.test?'search':'indexOf'](tkn);\n\t\t\t\tif( idx != -1 && (self.min == -1 || idx < self.min )){\n\t\t\t\t\tself.tkn = tkn;\n\t\t\t\t\tself.min = idx;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( self.min == -1 )\n\t\t\t\tself.min = self.src.length;\n\t\t};\n\t}\n};"]],"start1":0,"start2":0,"length1":0,"length2":10550}]],"length":10550}
